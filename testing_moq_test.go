// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testutil_test

import (
	"github.com/gostaticanalysis/testutil"
	"sync"
)

// Ensure, that mockTestingT does implement testutil.TestingT.
// If this is not the case, regenerate this file with moq.
var _ testutil.TestingT = &mockTestingT{}

// mockTestingT is a mock implementation of testutil.TestingT.
//
//	func TestSomethingThatUsesTestingT(t *testing.T) {
//
//		// make and configure a mocked testutil.TestingT
//		mockedTestingT := &mockTestingT{
//			CleanupFunc: func(fn func())  {
//				panic("mock out the Cleanup method")
//			},
//			ErrorFunc: func(args ...any)  {
//				panic("mock out the Error method")
//			},
//			ErrorfFunc: func(format string, args ...any)  {
//				panic("mock out the Errorf method")
//			},
//			FatalFunc: func(args ...any)  {
//				panic("mock out the Fatal method")
//			},
//			FatalfFunc: func(format string, args ...any)  {
//				panic("mock out the Fatalf method")
//			},
//			HelperFunc: func()  {
//				panic("mock out the Helper method")
//			},
//			TempDirFunc: func() string {
//				panic("mock out the TempDir method")
//			},
//		}
//
//		// use mockedTestingT in code that requires testutil.TestingT
//		// and then make assertions.
//
//	}
type mockTestingT struct {
	// CleanupFunc mocks the Cleanup method.
	CleanupFunc func(fn func())

	// ErrorFunc mocks the Error method.
	ErrorFunc func(args ...any)

	// ErrorfFunc mocks the Errorf method.
	ErrorfFunc func(format string, args ...any)

	// FatalFunc mocks the Fatal method.
	FatalFunc func(args ...any)

	// FatalfFunc mocks the Fatalf method.
	FatalfFunc func(format string, args ...any)

	// HelperFunc mocks the Helper method.
	HelperFunc func()

	// TempDirFunc mocks the TempDir method.
	TempDirFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Cleanup holds details about calls to the Cleanup method.
		Cleanup []struct {
			// Fn is the fn argument value.
			Fn func()
		}
		// Error holds details about calls to the Error method.
		Error []struct {
			// Args is the args argument value.
			Args []any
		}
		// Errorf holds details about calls to the Errorf method.
		Errorf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
		// Fatal holds details about calls to the Fatal method.
		Fatal []struct {
			// Args is the args argument value.
			Args []any
		}
		// Fatalf holds details about calls to the Fatalf method.
		Fatalf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
		// Helper holds details about calls to the Helper method.
		Helper []struct {
		}
		// TempDir holds details about calls to the TempDir method.
		TempDir []struct {
		}
	}
	lockCleanup sync.RWMutex
	lockError   sync.RWMutex
	lockErrorf  sync.RWMutex
	lockFatal   sync.RWMutex
	lockFatalf  sync.RWMutex
	lockHelper  sync.RWMutex
	lockTempDir sync.RWMutex
}

// Cleanup calls CleanupFunc.
func (mock *mockTestingT) Cleanup(fn func()) {
	callInfo := struct {
		Fn func()
	}{
		Fn: fn,
	}
	mock.lockCleanup.Lock()
	mock.calls.Cleanup = append(mock.calls.Cleanup, callInfo)
	mock.lockCleanup.Unlock()
	if mock.CleanupFunc == nil {
		return
	}
	mock.CleanupFunc(fn)
}

// CleanupCalls gets all the calls that were made to Cleanup.
// Check the length with:
//
//	len(mockedTestingT.CleanupCalls())
func (mock *mockTestingT) CleanupCalls() []struct {
	Fn func()
} {
	var calls []struct {
		Fn func()
	}
	mock.lockCleanup.RLock()
	calls = mock.calls.Cleanup
	mock.lockCleanup.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *mockTestingT) Error(args ...any) {
	callInfo := struct {
		Args []any
	}{
		Args: args,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	if mock.ErrorFunc == nil {
		return
	}
	mock.ErrorFunc(args...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedTestingT.ErrorCalls())
func (mock *mockTestingT) ErrorCalls() []struct {
	Args []any
} {
	var calls []struct {
		Args []any
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}

// Errorf calls ErrorfFunc.
func (mock *mockTestingT) Errorf(format string, args ...any) {
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockErrorf.Lock()
	mock.calls.Errorf = append(mock.calls.Errorf, callInfo)
	mock.lockErrorf.Unlock()
	if mock.ErrorfFunc == nil {
		return
	}
	mock.ErrorfFunc(format, args...)
}

// ErrorfCalls gets all the calls that were made to Errorf.
// Check the length with:
//
//	len(mockedTestingT.ErrorfCalls())
func (mock *mockTestingT) ErrorfCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockErrorf.RLock()
	calls = mock.calls.Errorf
	mock.lockErrorf.RUnlock()
	return calls
}

// Fatal calls FatalFunc.
func (mock *mockTestingT) Fatal(args ...any) {
	callInfo := struct {
		Args []any
	}{
		Args: args,
	}
	mock.lockFatal.Lock()
	mock.calls.Fatal = append(mock.calls.Fatal, callInfo)
	mock.lockFatal.Unlock()
	if mock.FatalFunc == nil {
		return
	}
	mock.FatalFunc(args...)
}

// FatalCalls gets all the calls that were made to Fatal.
// Check the length with:
//
//	len(mockedTestingT.FatalCalls())
func (mock *mockTestingT) FatalCalls() []struct {
	Args []any
} {
	var calls []struct {
		Args []any
	}
	mock.lockFatal.RLock()
	calls = mock.calls.Fatal
	mock.lockFatal.RUnlock()
	return calls
}

// Fatalf calls FatalfFunc.
func (mock *mockTestingT) Fatalf(format string, args ...any) {
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockFatalf.Lock()
	mock.calls.Fatalf = append(mock.calls.Fatalf, callInfo)
	mock.lockFatalf.Unlock()
	if mock.FatalfFunc == nil {
		return
	}
	mock.FatalfFunc(format, args...)
}

// FatalfCalls gets all the calls that were made to Fatalf.
// Check the length with:
//
//	len(mockedTestingT.FatalfCalls())
func (mock *mockTestingT) FatalfCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockFatalf.RLock()
	calls = mock.calls.Fatalf
	mock.lockFatalf.RUnlock()
	return calls
}

// Helper calls HelperFunc.
func (mock *mockTestingT) Helper() {
	callInfo := struct {
	}{}
	mock.lockHelper.Lock()
	mock.calls.Helper = append(mock.calls.Helper, callInfo)
	mock.lockHelper.Unlock()
	if mock.HelperFunc == nil {
		return
	}
	mock.HelperFunc()
}

// HelperCalls gets all the calls that were made to Helper.
// Check the length with:
//
//	len(mockedTestingT.HelperCalls())
func (mock *mockTestingT) HelperCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHelper.RLock()
	calls = mock.calls.Helper
	mock.lockHelper.RUnlock()
	return calls
}

// TempDir calls TempDirFunc.
func (mock *mockTestingT) TempDir() string {
	callInfo := struct {
	}{}
	mock.lockTempDir.Lock()
	mock.calls.TempDir = append(mock.calls.TempDir, callInfo)
	mock.lockTempDir.Unlock()
	if mock.TempDirFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.TempDirFunc()
}

// TempDirCalls gets all the calls that were made to TempDir.
// Check the length with:
//
//	len(mockedTestingT.TempDirCalls())
func (mock *mockTestingT) TempDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTempDir.RLock()
	calls = mock.calls.TempDir
	mock.lockTempDir.RUnlock()
	return calls
}
